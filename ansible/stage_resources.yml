---
# This playbook will prepare the staging directories and retrieve the automation resources for the autodeploynode.
# The resources will be staged locally in the /opt/autodeploy/projects/ and opt/autodeploy/resources/ directories.

- name: Prepare the staging resources
  gather_facts: true
  hosts: localhost

  tasks:

    - name: Install required support packages
      yum:
        pkg: "{{ item }}"
        state: present
      with_items: autodeploy_support_pkgs
      tags: pkgs

    - name: Install required pip-based support packages
      pip:
        name: "{{ item }}"
        state: present
        extra_args: "--upgrade"
      with_items: pip_pkgs
      tags: pkgs

    - name: Create the staging directories in /opt/autodeploy
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "{{ projects_base_path }}"
        - "{{ resources_base_path }}"
      tags: paths

    - name: Create the resource directories in the staging directories
      file:
        path: "{{ resources_base_path }}/{{ item }}"
        state: directory
      with_items: resource_dirs
      tags: paths

    - name: Check if private project tar.gz exists in /opt/autodeploy/projects
      stat:
        path: "{{ projects_base_path }}/wiley/{{ private_git_file }}"
      register: private_git
      tags: git

    - name: Download the private project repo from Git to /opt/autodeploy/projects
      selenium:
        url: "{{ private_git_url }}"
        username: "{{ git_user }}"
        password: "{{ git_pass }}"
        username_element_id: login_field
        password_element_id: password
        download_directory: "{{ projects_base_path }}/wiley/"
      when: not (private_git.stat.exists)
      tags: git

    - name: Extract the private project source files
      command: "tar -C {{ projects_base_path }}/wiley/ -xvzf {{ projects_base_path }}/wiley/{{ private_git_file}} --strip=1"
      tags: git

    - name: Download the Hanlon microkernel image to /opt/autodeploy/resources/ISO
      get_url:
        url: "{{ hnl_mk_source }}{{ hnl_mk_image }}"
        dest: "{{ iso_path }}"
      tags: iso

# There two separate selenium downloads here because the authtoken on the link will time out
    - name: Find the RHEL DVD ISO file url
      selenium:
        url: "{{ rhel_download_url }}"
        username: "{{ rhn_user }}"
        password: "{{ rhn_pass }}"
        username_element_id: username
        password_element_id: password
        xpath: '//*[contains(@href,"{{ rhel_iso_image }}")]'
      register: rhel_get_url
      tags: iso

    - name: Download the RHEL DVD ISO file to /opt/autodeploy/resources/ISO
      get_url:
        url: "{{ rhel_get_url.url }}"
        dest: "{{ iso_path }}"
      tags: iso

# There two separate selenium downloads here because the authtoken on the link will time out
    - name: Find the Red Hat KVM Guest Image file url
      selenium:
        url: "{{ rhel_download_url }}"
        username: "{{ rhn_user }}"
        password: "{{ rhn_pass }}"
        username_element_id: username
        password_element_id: password
        xpath: '//*[contains(@href,"{{ kvm_guest_image }}")]'
      register: kvm_get_url
      tags: iso

    - name: Download the KVM Guest Image file to /opt/autodeploy/resources/ISO
      get_url:
        url: "{{ kvm_get_url.url }}"
        dest: "{{ iso_path }}"
      tags: iso

    - name: Download the Red Hat RPMs to /opt/autodeploy/resources/rpms
      shell: repotrack $(cat {{ rpm_list }}) -p {{ rpm_path }}
      when: offline
      tags: repo

    - name: Create the local offline repository in /opt/autodeploy/resources/rpms
      command: createrepo "{{ rpm_path }}"
      when: offline
      tags: repo

    - name: Mirror docker-py and its dependencies to /opt/autodeploy/resources/packages
      command: pip2tgz "{{ packages_path }}" docker-py
      when: offline
      tags: docker

    - name: Create the PyPi-compatible "simple" package in /opt/autodeploy/resources/packages
      command: dir2pi "{{ packages_path }}"
      when: offline
      tags: docker

    - name: Start and enable the docker service
      service:
        name: docker
        enabled: yes
        state: started
      tags: docker

    - name: Pull the project docker images from the docker registry
      docker:
        docker_api_version: "{{ docker_api_version }}"
        name: "{{ item.name }}"
        image: "{{ item.image }}"
        pull: always
        state: present
      with_items:
        - { name: hanlon-mongo, image: mongo }
#        - { name: hanlon-cassandra, image: tobert/cassandra }
        - { name: hanlon-server, image: cscdock/hanlon }
        - { name: hanlon-atftpd, image: cscdock/atftpd }
      tags: docker

    - name: Save docker container images to /opt/autodeploy/resources/docker
      shell: docker save docker.io/"{{ item.image }}" > "{{ docker_path }}/{{ item.tar_file }}"
      with_items:
        - { image: cscdock/hanlon, tar_file: cscdock_hanlon.tar }
        - { image: cscdock/atftpd, tar_file: cscdock_atftpd.tar }
        - { image: mongo, tar_file: mongo.tar }
      when: offline
      tags: docker

    - name: Download ScaleIO files for ansible-scaleio to /opt/autodeploy/resources/scaleio
      get_url:
        url: "{{ scaleio_source_url }}"
        dest: "{{ scaleio_path }}"
      tags: scaleio

    - name: Copy the downloaded projects to the usb drive
      copy:
        src: "{{ projects_base_path }}/{{ item }}"
        dest: "{{ usb_projects_path }}"
      with_items: source_projects
      when : offline
      tags: copy

    - name: Copy the downloaded resources to the usb drive
      copy:
        src: "{{ resources_base_path }}/{{ item }}"
        dest: "{{ usb_resources_path }}"
      with_items: resource_dirs
      when: offline
      tags: copy
