---
# This playbook will verify the source files are copied from the usb drive to the autodeploynode.

- name: Check if source project files exist on autodeploynode
  stat:
    path: "{{ projects_base_path }}/{{ item }}"
  with_items: "{{ project_files }}"
  register: git_present

- name: Copy source project files to autodeploynode when offline
  copy:
    src: "{{ item.invocation.module_complex_args.path }}"
    dest: "{{ projects_base_path }}"
  with_items: "{{ git_present.results }}"
  when: not {{ item.stat.exists }}

- name: Check if source ISO files exist on autodeploynode
  stat:
    path: "{{ iso_path }}/{{ item }}"
  with_items: "{{ iso_files }}"
  register: iso_present

- name: Copy source ISO files to autodeploynode when offline
  copy:
    src: "{{ item.invocation.module_complex_args.path }}"
    dest: "{{ iso_path }}"
  with_items: "{{ iso_present.results }}"
  when: not {{ item.stat.exists }}

- name: Check if source docker files exist on autodeploynode
  stat:
    path: "{{ docker_path }}/{{ item.tar_file }}"
  with_items: "{{ docker_images }}"
  register: docker_present

- name: Copy source docker files to autodeploynode when offline
  copy:
    src: "{{ item.invocation.module_complex_args.path }}"
    dest: "{{ docker_path }}"
  with_items: "{{ docker_present.results }}"
  when: not {{ item.stat.exists }}

- name: Copy source python package files to autodeploynode when offline
  copy:
    src: "{{ usb_packages_path }}"
    dest: "{{ packages_path }}"

- set_fact:
    contents: "{{ lookup('file', '{{ rpm_list }}') }}"

- name: Copy Source Red Hat RPMs to autodeploynode when offline
  copy:
    src: "{{ usb_rpms_path }}/{{ item }}.rpm"
    dest: "{{ rpm_path }}"
  with_items: "{{ contents.splitlines() }}"

- name: Check if source scaleio files exist on autodeploynode
  stat:
    path: "{{ item }}"
  with_fileglob:
    - "{{ usb_scaleio_path }}/*.zip"
  register: scaleio_present

- name: Copy source scaleio files to autodeploynode when offline
  copy:
    src: "{{ item.invocation.module_complex_args.path }}"
    dest: "{{ scaleio_path }}"
  with_items: "{{ scaleio_present.results }}"
  when: not {{ item.stat.exists }}

